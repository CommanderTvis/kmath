var pages = [{"name":"class DerivativeStructureExpression(function: DerivativeStructureField.() -> DerivativeStructure) : DifferentiableExpression<Double, Expression<Double>> ","description":"space.kscience.kmath.commons.expressions.DerivativeStructureExpression","location":"kmath-commons/space.kscience.kmath.commons.expressions/-derivative-structure-expression/index.html","searchKeys":["DerivativeStructureExpression","class DerivativeStructureExpression(function: DerivativeStructureField.() -> DerivativeStructure) : DifferentiableExpression<Double, Expression<Double>> "]},{"name":"fun DerivativeStructureExpression(function: DerivativeStructureField.() -> DerivativeStructure)","description":"space.kscience.kmath.commons.expressions.DerivativeStructureExpression.DerivativeStructureExpression","location":"kmath-commons/space.kscience.kmath.commons.expressions/-derivative-structure-expression/-derivative-structure-expression.html","searchKeys":["DerivativeStructureExpression","fun DerivativeStructureExpression(function: DerivativeStructureField.() -> DerivativeStructure)"]},{"name":"open override fun derivativeOrNull(symbols: List<Symbol>): Expression<Double>","description":"space.kscience.kmath.commons.expressions.DerivativeStructureExpression.derivativeOrNull","location":"kmath-commons/space.kscience.kmath.commons.expressions/-derivative-structure-expression/derivative-or-null.html","searchKeys":["derivativeOrNull","open override fun derivativeOrNull(symbols: List<Symbol>): Expression<Double>"]},{"name":"val function: DerivativeStructureField.() -> DerivativeStructure","description":"space.kscience.kmath.commons.expressions.DerivativeStructureExpression.function","location":"kmath-commons/space.kscience.kmath.commons.expressions/-derivative-structure-expression/function.html","searchKeys":["function","val function: DerivativeStructureField.() -> DerivativeStructure"]},{"name":"open operator override fun invoke(arguments: Map<Symbol, Double>): Double","description":"space.kscience.kmath.commons.expressions.DerivativeStructureExpression.invoke","location":"kmath-commons/space.kscience.kmath.commons.expressions/-derivative-structure-expression/invoke.html","searchKeys":["invoke","open operator override fun invoke(arguments: Map<Symbol, Double>): Double"]},{"name":"class DerivativeStructureField(order: Int, bindings: Map<Symbol, Double>) : ExtendedField<DerivativeStructure> , ExpressionAlgebra<Double, DerivativeStructure> , RingWithNumbers<DerivativeStructure> ","description":"space.kscience.kmath.commons.expressions.DerivativeStructureField","location":"kmath-commons/space.kscience.kmath.commons.expressions/-derivative-structure-field/index.html","searchKeys":["DerivativeStructureField","class DerivativeStructureField(order: Int, bindings: Map<Symbol, Double>) : ExtendedField<DerivativeStructure> , ExpressionAlgebra<Double, DerivativeStructure> , RingWithNumbers<DerivativeStructure> "]},{"name":"fun DerivativeStructureField(order: Int, bindings: Map<Symbol, Double>)","description":"space.kscience.kmath.commons.expressions.DerivativeStructureField.DerivativeStructureField","location":"kmath-commons/space.kscience.kmath.commons.expressions/-derivative-structure-field/-derivative-structure-field.html","searchKeys":["DerivativeStructureField","fun DerivativeStructureField(order: Int, bindings: Map<Symbol, Double>)"]},{"name":"object Companion : AutoDiffProcessor<Double, DerivativeStructure, DerivativeStructureField, Expression<Double>> ","description":"space.kscience.kmath.commons.expressions.DerivativeStructureField.Companion","location":"kmath-commons/space.kscience.kmath.commons.expressions/-derivative-structure-field/-companion/index.html","searchKeys":["Companion","object Companion : AutoDiffProcessor<Double, DerivativeStructure, DerivativeStructureField, Expression<Double>> "]},{"name":"object Companion : OptimizationProblemFactory<Double, CMOptimizationProblem> ","description":"space.kscience.kmath.commons.optimization.CMOptimizationProblem.Companion","location":"kmath-commons/space.kscience.kmath.commons.optimization/-c-m-optimization-problem/-companion/index.html","searchKeys":["Companion","object Companion : OptimizationProblemFactory<Double, CMOptimizationProblem> "]},{"name":"open override fun process(function: DerivativeStructureField.() -> DerivativeStructure): DifferentiableExpression<Double, Expression<Double>>","description":"space.kscience.kmath.commons.expressions.DerivativeStructureField.Companion.process","location":"kmath-commons/space.kscience.kmath.commons.expressions/-derivative-structure-field/-companion/process.html","searchKeys":["process","open override fun process(function: DerivativeStructureField.() -> DerivativeStructure): DifferentiableExpression<Double, Expression<Double>>"]},{"name":"inner class DerivativeStructureSymbol(size: Int, index: Int, symbol: Symbol, value: Double) : DerivativeStructure, Symbol","description":"space.kscience.kmath.commons.expressions.DerivativeStructureField.DerivativeStructureSymbol","location":"kmath-commons/space.kscience.kmath.commons.expressions/-derivative-structure-field/-derivative-structure-symbol/index.html","searchKeys":["DerivativeStructureSymbol","inner class DerivativeStructureSymbol(size: Int, index: Int, symbol: Symbol, value: Double) : DerivativeStructure, Symbol"]},{"name":"fun DerivativeStructureSymbol(size: Int, index: Int, symbol: Symbol, value: Double)","description":"space.kscience.kmath.commons.expressions.DerivativeStructureField.DerivativeStructureSymbol.DerivativeStructureSymbol","location":"kmath-commons/space.kscience.kmath.commons.expressions/-derivative-structure-field/-derivative-structure-symbol/-derivative-structure-symbol.html","searchKeys":["DerivativeStructureSymbol","fun DerivativeStructureSymbol(size: Int, index: Int, symbol: Symbol, value: Double)"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"space.kscience.kmath.commons.expressions.DerivativeStructureField.DerivativeStructureSymbol.equals","location":"kmath-commons/space.kscience.kmath.commons.expressions/-derivative-structure-field/-derivative-structure-symbol/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean"]},{"name":"open override fun hashCode(): Int","description":"space.kscience.kmath.commons.expressions.DerivativeStructureField.DerivativeStructureSymbol.hashCode","location":"kmath-commons/space.kscience.kmath.commons.expressions/-derivative-structure-field/-derivative-structure-symbol/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int"]},{"name":"open override val identity: String","description":"space.kscience.kmath.commons.expressions.DerivativeStructureField.DerivativeStructureSymbol.identity","location":"kmath-commons/space.kscience.kmath.commons.expressions/-derivative-structure-field/-derivative-structure-symbol/identity.html","searchKeys":["identity","open override val identity: String"]},{"name":"open override fun toString(): String","description":"space.kscience.kmath.commons.expressions.DerivativeStructureField.DerivativeStructureSymbol.toString","location":"kmath-commons/space.kscience.kmath.commons.expressions/-derivative-structure-field/-derivative-structure-symbol/to-string.html","searchKeys":["toString","open override fun toString(): String"]},{"name":"open override fun acos(arg: DerivativeStructure): DerivativeStructure","description":"space.kscience.kmath.commons.expressions.DerivativeStructureField.acos","location":"kmath-commons/space.kscience.kmath.commons.expressions/-derivative-structure-field/acos.html","searchKeys":["acos","open override fun acos(arg: DerivativeStructure): DerivativeStructure"]},{"name":"open override fun acosh(arg: DerivativeStructure): DerivativeStructure","description":"space.kscience.kmath.commons.expressions.DerivativeStructureField.acosh","location":"kmath-commons/space.kscience.kmath.commons.expressions/-derivative-structure-field/acosh.html","searchKeys":["acosh","open override fun acosh(arg: DerivativeStructure): DerivativeStructure"]},{"name":"open override fun add(a: DerivativeStructure, b: DerivativeStructure): DerivativeStructure","description":"space.kscience.kmath.commons.expressions.DerivativeStructureField.add","location":"kmath-commons/space.kscience.kmath.commons.expressions/-derivative-structure-field/add.html","searchKeys":["add","open override fun add(a: DerivativeStructure, b: DerivativeStructure): DerivativeStructure"]},{"name":"open override fun add(a: Matrix<Double>, b: Matrix<Double>): CMMatrix","description":"space.kscience.kmath.commons.linear.CMMatrixContext.add","location":"kmath-commons/space.kscience.kmath.commons.linear/-c-m-matrix-context/add.html","searchKeys":["add","open override fun add(a: Matrix<Double>, b: Matrix<Double>): CMMatrix"]},{"name":"open override fun asin(arg: DerivativeStructure): DerivativeStructure","description":"space.kscience.kmath.commons.expressions.DerivativeStructureField.asin","location":"kmath-commons/space.kscience.kmath.commons.expressions/-derivative-structure-field/asin.html","searchKeys":["asin","open override fun asin(arg: DerivativeStructure): DerivativeStructure"]},{"name":"open override fun asinh(arg: DerivativeStructure): DerivativeStructure","description":"space.kscience.kmath.commons.expressions.DerivativeStructureField.asinh","location":"kmath-commons/space.kscience.kmath.commons.expressions/-derivative-structure-field/asinh.html","searchKeys":["asinh","open override fun asinh(arg: DerivativeStructure): DerivativeStructure"]},{"name":"open override fun atan(arg: DerivativeStructure): DerivativeStructure","description":"space.kscience.kmath.commons.expressions.DerivativeStructureField.atan","location":"kmath-commons/space.kscience.kmath.commons.expressions/-derivative-structure-field/atan.html","searchKeys":["atan","open override fun atan(arg: DerivativeStructure): DerivativeStructure"]},{"name":"open override fun atanh(arg: DerivativeStructure): DerivativeStructure","description":"space.kscience.kmath.commons.expressions.DerivativeStructureField.atanh","location":"kmath-commons/space.kscience.kmath.commons.expressions/-derivative-structure-field/atanh.html","searchKeys":["atanh","open override fun atanh(arg: DerivativeStructure): DerivativeStructure"]},{"name":"fun bind(symbol: Symbol): DerivativeStructureField.DerivativeStructureSymbol","description":"space.kscience.kmath.commons.expressions.DerivativeStructureField.bind","location":"kmath-commons/space.kscience.kmath.commons.expressions/-derivative-structure-field/bind.html","searchKeys":["bind","fun bind(symbol: Symbol): DerivativeStructureField.DerivativeStructureSymbol"]},{"name":"open override fun bindSymbol(value: String): DerivativeStructureField.DerivativeStructureSymbol","description":"space.kscience.kmath.commons.expressions.DerivativeStructureField.bindSymbol","location":"kmath-commons/space.kscience.kmath.commons.expressions/-derivative-structure-field/bind-symbol.html","searchKeys":["bindSymbol","open override fun bindSymbol(value: String): DerivativeStructureField.DerivativeStructureSymbol"]},{"name":"open override fun bindSymbolOrNull(symbol: Symbol): DerivativeStructureField.DerivativeStructureSymbol?","description":"space.kscience.kmath.commons.expressions.DerivativeStructureField.bindSymbolOrNull","location":"kmath-commons/space.kscience.kmath.commons.expressions/-derivative-structure-field/bind-symbol-or-null.html","searchKeys":["bindSymbolOrNull","open override fun bindSymbolOrNull(symbol: Symbol): DerivativeStructureField.DerivativeStructureSymbol?"]},{"name":"open override fun const(value: Double): DerivativeStructure","description":"space.kscience.kmath.commons.expressions.DerivativeStructureField.const","location":"kmath-commons/space.kscience.kmath.commons.expressions/-derivative-structure-field/const.html","searchKeys":["const","open override fun const(value: Double): DerivativeStructure"]},{"name":"open override fun cos(arg: DerivativeStructure): DerivativeStructure","description":"space.kscience.kmath.commons.expressions.DerivativeStructureField.cos","location":"kmath-commons/space.kscience.kmath.commons.expressions/-derivative-structure-field/cos.html","searchKeys":["cos","open override fun cos(arg: DerivativeStructure): DerivativeStructure"]},{"name":"open override fun cosh(arg: DerivativeStructure): DerivativeStructure","description":"space.kscience.kmath.commons.expressions.DerivativeStructureField.cosh","location":"kmath-commons/space.kscience.kmath.commons.expressions/-derivative-structure-field/cosh.html","searchKeys":["cosh","open override fun cosh(arg: DerivativeStructure): DerivativeStructure"]},{"name":"open override fun divide(a: DerivativeStructure, b: DerivativeStructure): DerivativeStructure","description":"space.kscience.kmath.commons.expressions.DerivativeStructureField.divide","location":"kmath-commons/space.kscience.kmath.commons.expressions/-derivative-structure-field/divide.html","searchKeys":["divide","open override fun divide(a: DerivativeStructure, b: DerivativeStructure): DerivativeStructure"]},{"name":"open override fun exp(arg: DerivativeStructure): DerivativeStructure","description":"space.kscience.kmath.commons.expressions.DerivativeStructureField.exp","location":"kmath-commons/space.kscience.kmath.commons.expressions/-derivative-structure-field/exp.html","searchKeys":["exp","open override fun exp(arg: DerivativeStructure): DerivativeStructure"]},{"name":"open override fun ln(arg: DerivativeStructure): DerivativeStructure","description":"space.kscience.kmath.commons.expressions.DerivativeStructureField.ln","location":"kmath-commons/space.kscience.kmath.commons.expressions/-derivative-structure-field/ln.html","searchKeys":["ln","open override fun ln(arg: DerivativeStructure): DerivativeStructure"]},{"name":"open override fun number(value: Number): DerivativeStructure","description":"space.kscience.kmath.commons.expressions.DerivativeStructureField.number","location":"kmath-commons/space.kscience.kmath.commons.expressions/-derivative-structure-field/number.html","searchKeys":["number","open override fun number(value: Number): DerivativeStructure"]},{"name":"val numberOfVariables: Int","description":"space.kscience.kmath.commons.expressions.DerivativeStructureField.numberOfVariables","location":"kmath-commons/space.kscience.kmath.commons.expressions/-derivative-structure-field/number-of-variables.html","searchKeys":["numberOfVariables","val numberOfVariables: Int"]},{"name":"open override val one: DerivativeStructure","description":"space.kscience.kmath.commons.expressions.DerivativeStructureField.one","location":"kmath-commons/space.kscience.kmath.commons.expressions/-derivative-structure-field/one.html","searchKeys":["one","open override val one: DerivativeStructure"]},{"name":"val order: Int","description":"space.kscience.kmath.commons.expressions.DerivativeStructureField.order","location":"kmath-commons/space.kscience.kmath.commons.expressions/-derivative-structure-field/order.html","searchKeys":["order","val order: Int"]},{"name":"open override fun sin(arg: DerivativeStructure): DerivativeStructure","description":"space.kscience.kmath.commons.expressions.DerivativeStructureField.sin","location":"kmath-commons/space.kscience.kmath.commons.expressions/-derivative-structure-field/sin.html","searchKeys":["sin","open override fun sin(arg: DerivativeStructure): DerivativeStructure"]},{"name":"open override fun sinh(arg: DerivativeStructure): DerivativeStructure","description":"space.kscience.kmath.commons.expressions.DerivativeStructureField.sinh","location":"kmath-commons/space.kscience.kmath.commons.expressions/-derivative-structure-field/sinh.html","searchKeys":["sinh","open override fun sinh(arg: DerivativeStructure): DerivativeStructure"]},{"name":"open override fun tan(arg: DerivativeStructure): DerivativeStructure","description":"space.kscience.kmath.commons.expressions.DerivativeStructureField.tan","location":"kmath-commons/space.kscience.kmath.commons.expressions/-derivative-structure-field/tan.html","searchKeys":["tan","open override fun tan(arg: DerivativeStructure): DerivativeStructure"]},{"name":"open override fun tanh(arg: DerivativeStructure): DerivativeStructure","description":"space.kscience.kmath.commons.expressions.DerivativeStructureField.tanh","location":"kmath-commons/space.kscience.kmath.commons.expressions/-derivative-structure-field/tanh.html","searchKeys":["tanh","open override fun tanh(arg: DerivativeStructure): DerivativeStructure"]},{"name":"open override val zero: DerivativeStructure","description":"space.kscience.kmath.commons.expressions.DerivativeStructureField.zero","location":"kmath-commons/space.kscience.kmath.commons.expressions/-derivative-structure-field/zero.html","searchKeys":["zero","open override val zero: DerivativeStructure"]},{"name":"enum CMDecomposition : Enum<CMDecomposition> ","description":"space.kscience.kmath.commons.linear.CMDecomposition","location":"kmath-commons/space.kscience.kmath.commons.linear/-c-m-decomposition/index.html","searchKeys":["CMDecomposition","enum CMDecomposition : Enum<CMDecomposition> "]},{"name":"CHOLESKY()","description":"space.kscience.kmath.commons.linear.CMDecomposition.CHOLESKY","location":"kmath-commons/space.kscience.kmath.commons.linear/-c-m-decomposition/-c-h-o-l-e-s-k-y/index.html","searchKeys":["CHOLESKY","CHOLESKY()"]},{"name":"val name: String","description":"space.kscience.kmath.commons.linear.CMDecomposition.CHOLESKY.name","location":"kmath-commons/space.kscience.kmath.commons.linear/-c-m-decomposition/-c-h-o-l-e-s-k-y/name.html","searchKeys":["name","val name: String"]},{"name":"val name: String","description":"space.kscience.kmath.commons.linear.CMDecomposition.EIGEN.name","location":"kmath-commons/space.kscience.kmath.commons.linear/-c-m-decomposition/-e-i-g-e-n/name.html","searchKeys":["name","val name: String"]},{"name":"val name: String","description":"space.kscience.kmath.commons.linear.CMDecomposition.LUP.name","location":"kmath-commons/space.kscience.kmath.commons.linear/-c-m-decomposition/-l-u-p/name.html","searchKeys":["name","val name: String"]},{"name":"val name: String","description":"space.kscience.kmath.commons.linear.CMDecomposition.QR.name","location":"kmath-commons/space.kscience.kmath.commons.linear/-c-m-decomposition/-q-r/name.html","searchKeys":["name","val name: String"]},{"name":"val name: String","description":"space.kscience.kmath.commons.linear.CMDecomposition.RRQR.name","location":"kmath-commons/space.kscience.kmath.commons.linear/-c-m-decomposition/-r-r-q-r/name.html","searchKeys":["name","val name: String"]},{"name":"val ordinal: Int","description":"space.kscience.kmath.commons.linear.CMDecomposition.CHOLESKY.ordinal","location":"kmath-commons/space.kscience.kmath.commons.linear/-c-m-decomposition/-c-h-o-l-e-s-k-y/ordinal.html","searchKeys":["ordinal","val ordinal: Int"]},{"name":"val ordinal: Int","description":"space.kscience.kmath.commons.linear.CMDecomposition.EIGEN.ordinal","location":"kmath-commons/space.kscience.kmath.commons.linear/-c-m-decomposition/-e-i-g-e-n/ordinal.html","searchKeys":["ordinal","val ordinal: Int"]},{"name":"val ordinal: Int","description":"space.kscience.kmath.commons.linear.CMDecomposition.LUP.ordinal","location":"kmath-commons/space.kscience.kmath.commons.linear/-c-m-decomposition/-l-u-p/ordinal.html","searchKeys":["ordinal","val ordinal: Int"]},{"name":"val ordinal: Int","description":"space.kscience.kmath.commons.linear.CMDecomposition.QR.ordinal","location":"kmath-commons/space.kscience.kmath.commons.linear/-c-m-decomposition/-q-r/ordinal.html","searchKeys":["ordinal","val ordinal: Int"]},{"name":"val ordinal: Int","description":"space.kscience.kmath.commons.linear.CMDecomposition.RRQR.ordinal","location":"kmath-commons/space.kscience.kmath.commons.linear/-c-m-decomposition/-r-r-q-r/ordinal.html","searchKeys":["ordinal","val ordinal: Int"]},{"name":"EIGEN()","description":"space.kscience.kmath.commons.linear.CMDecomposition.EIGEN","location":"kmath-commons/space.kscience.kmath.commons.linear/-c-m-decomposition/-e-i-g-e-n/index.html","searchKeys":["EIGEN","EIGEN()"]},{"name":"LUP()","description":"space.kscience.kmath.commons.linear.CMDecomposition.LUP","location":"kmath-commons/space.kscience.kmath.commons.linear/-c-m-decomposition/-l-u-p/index.html","searchKeys":["LUP","LUP()"]},{"name":"QR()","description":"space.kscience.kmath.commons.linear.CMDecomposition.QR","location":"kmath-commons/space.kscience.kmath.commons.linear/-c-m-decomposition/-q-r/index.html","searchKeys":["QR","QR()"]},{"name":"RRQR()","description":"space.kscience.kmath.commons.linear.CMDecomposition.RRQR","location":"kmath-commons/space.kscience.kmath.commons.linear/-c-m-decomposition/-r-r-q-r/index.html","searchKeys":["RRQR","RRQR()"]},{"name":"inline class CMMatrix(origin: RealMatrix) : Structure2D<Double> ","description":"space.kscience.kmath.commons.linear.CMMatrix","location":"kmath-commons/space.kscience.kmath.commons.linear/-c-m-matrix/index.html","searchKeys":["CMMatrix","inline class CMMatrix(origin: RealMatrix) : Structure2D<Double> "]},{"name":"fun CMMatrix(origin: RealMatrix)","description":"space.kscience.kmath.commons.linear.CMMatrix.CMMatrix","location":"kmath-commons/space.kscience.kmath.commons.linear/-c-m-matrix/-c-m-matrix.html","searchKeys":["CMMatrix","fun CMMatrix(origin: RealMatrix)"]},{"name":"open override val colNum: Int","description":"space.kscience.kmath.commons.linear.CMMatrix.colNum","location":"kmath-commons/space.kscience.kmath.commons.linear/-c-m-matrix/col-num.html","searchKeys":["colNum","open override val colNum: Int"]},{"name":"open operator override fun get(i: Int, j: Int): Double","description":"space.kscience.kmath.commons.linear.CMMatrix.get","location":"kmath-commons/space.kscience.kmath.commons.linear/-c-m-matrix/get.html","searchKeys":["get","open operator override fun get(i: Int, j: Int): Double"]},{"name":"open operator override fun get(index: Int): Double","description":"space.kscience.kmath.commons.linear.CMVector.get","location":"kmath-commons/space.kscience.kmath.commons.linear/-c-m-vector/get.html","searchKeys":["get","open operator override fun get(index: Int): Double"]},{"name":"open override fun <T : Any> getFeature(type: KClass<T>): T?","description":"space.kscience.kmath.commons.linear.CMMatrix.getFeature","location":"kmath-commons/space.kscience.kmath.commons.linear/-c-m-matrix/get-feature.html","searchKeys":["getFeature","open override fun <T : Any> getFeature(type: KClass<T>): T?"]},{"name":"val origin: RealMatrix","description":"space.kscience.kmath.commons.linear.CMMatrix.origin","location":"kmath-commons/space.kscience.kmath.commons.linear/-c-m-matrix/origin.html","searchKeys":["origin","val origin: RealMatrix"]},{"name":"val origin: RealVector","description":"space.kscience.kmath.commons.linear.CMVector.origin","location":"kmath-commons/space.kscience.kmath.commons.linear/-c-m-vector/origin.html","searchKeys":["origin","val origin: RealVector"]},{"name":"open override val rowNum: Int","description":"space.kscience.kmath.commons.linear.CMMatrix.rowNum","location":"kmath-commons/space.kscience.kmath.commons.linear/-c-m-matrix/row-num.html","searchKeys":["rowNum","open override val rowNum: Int"]},{"name":"object CMMatrixContext : MatrixContext<Double, CMMatrix> ","description":"space.kscience.kmath.commons.linear.CMMatrixContext","location":"kmath-commons/space.kscience.kmath.commons.linear/-c-m-matrix-context/index.html","searchKeys":["CMMatrixContext","object CMMatrixContext : MatrixContext<Double, CMMatrix> "]},{"name":"open operator override fun Matrix<Double>.minus(b: Matrix<Double>): CMMatrix","description":"space.kscience.kmath.commons.linear.CMMatrixContext.minus","location":"kmath-commons/space.kscience.kmath.commons.linear/-c-m-matrix-context/minus.html","searchKeys":["minus","open operator override fun Matrix<Double>.minus(b: Matrix<Double>): CMMatrix"]},{"name":"operator fun CMMatrix.minus(other: CMMatrix): CMMatrix","description":"space.kscience.kmath.commons.linear.minus","location":"kmath-commons/space.kscience.kmath.commons.linear/minus.html","searchKeys":["minus","operator fun CMMatrix.minus(other: CMMatrix): CMMatrix"]},{"name":"open override fun multiply(a: Matrix<Double>, k: Number): CMMatrix","description":"space.kscience.kmath.commons.linear.CMMatrixContext.multiply","location":"kmath-commons/space.kscience.kmath.commons.linear/-c-m-matrix-context/multiply.html","searchKeys":["multiply","open override fun multiply(a: Matrix<Double>, k: Number): CMMatrix"]},{"name":"open override fun produce(rows: Int, columns: Int, initializer: (i: Int, j: Int) -> Double): CMMatrix","description":"space.kscience.kmath.commons.linear.CMMatrixContext.produce","location":"kmath-commons/space.kscience.kmath.commons.linear/-c-m-matrix-context/produce.html","searchKeys":["produce","open override fun produce(rows: Int, columns: Int, initializer: (i: Int, j: Int) -> Double): CMMatrix"]},{"name":"open operator override fun Matrix<Double>.times(value: Double): CMMatrix","description":"space.kscience.kmath.commons.linear.CMMatrixContext.times","location":"kmath-commons/space.kscience.kmath.commons.linear/-c-m-matrix-context/times.html","searchKeys":["times","open operator override fun Matrix<Double>.times(value: Double): CMMatrix"]},{"name":"fun Matrix<Double>.toCM(): CMMatrix","description":"space.kscience.kmath.commons.linear.CMMatrixContext.toCM","location":"kmath-commons/space.kscience.kmath.commons.linear/-c-m-matrix-context/to-c-m.html","searchKeys":["toCM","fun Matrix<Double>.toCM(): CMMatrix"]},{"name":"fun Point<Double>.toCM(): CMVector","description":"space.kscience.kmath.commons.linear.toCM","location":"kmath-commons/space.kscience.kmath.commons.linear/to-c-m.html","searchKeys":["toCM","fun Point<Double>.toCM(): CMVector"]},{"name":"open operator override fun Matrix<Double>.unaryMinus(): CMMatrix","description":"space.kscience.kmath.commons.linear.CMMatrixContext.unaryMinus","location":"kmath-commons/space.kscience.kmath.commons.linear/-c-m-matrix-context/unary-minus.html","searchKeys":["unaryMinus","open operator override fun Matrix<Double>.unaryMinus(): CMMatrix"]},{"name":"class CMVector(origin: RealVector) : Buffer<Double> ","description":"space.kscience.kmath.commons.linear.CMVector","location":"kmath-commons/space.kscience.kmath.commons.linear/-c-m-vector/index.html","searchKeys":["CMVector","class CMVector(origin: RealVector) : Buffer<Double> "]},{"name":"fun CMVector(origin: RealVector)","description":"space.kscience.kmath.commons.linear.CMVector.CMVector","location":"kmath-commons/space.kscience.kmath.commons.linear/-c-m-vector/-c-m-vector.html","searchKeys":["CMVector","fun CMVector(origin: RealVector)"]},{"name":"open operator override fun iterator(): Iterator<Double>","description":"space.kscience.kmath.commons.linear.CMVector.iterator","location":"kmath-commons/space.kscience.kmath.commons.linear/-c-m-vector/iterator.html","searchKeys":["iterator","open operator override fun iterator(): Iterator<Double>"]},{"name":"open override val size: Int","description":"space.kscience.kmath.commons.linear.CMVector.size","location":"kmath-commons/space.kscience.kmath.commons.linear/-c-m-vector/size.html","searchKeys":["size","open override val size: Int"]},{"name":"fun RealMatrix.asMatrix(): CMMatrix","description":"space.kscience.kmath.commons.linear.asMatrix","location":"kmath-commons/space.kscience.kmath.commons.linear/as-matrix.html","searchKeys":["asMatrix","fun RealMatrix.asMatrix(): CMMatrix"]},{"name":"infix fun CMMatrix.dot(other: CMMatrix): CMMatrix","description":"space.kscience.kmath.commons.linear.dot","location":"kmath-commons/space.kscience.kmath.commons.linear/dot.html","searchKeys":["dot","infix fun CMMatrix.dot(other: CMMatrix): CMMatrix"]},{"name":"fun CMMatrixContext.inverse(a: Matrix<Double>, decomposition: CMDecomposition = CMDecomposition.LUP): CMMatrix","description":"space.kscience.kmath.commons.linear.inverse","location":"kmath-commons/space.kscience.kmath.commons.linear/inverse.html","searchKeys":["inverse","fun CMMatrixContext.inverse(a: Matrix<Double>, decomposition: CMDecomposition = CMDecomposition.LUP): CMMatrix"]},{"name":"operator fun CMMatrix.plus(other: CMMatrix): CMMatrix","description":"space.kscience.kmath.commons.linear.plus","location":"kmath-commons/space.kscience.kmath.commons.linear/plus.html","searchKeys":["plus","operator fun CMMatrix.plus(other: CMMatrix): CMMatrix"]},{"name":"fun CMMatrixContext.solver(a: Matrix<Double>, decomposition: CMDecomposition = CMDecomposition.LUP): DecompositionSolver","description":"space.kscience.kmath.commons.linear.solver","location":"kmath-commons/space.kscience.kmath.commons.linear/solver.html","searchKeys":["solver","fun CMMatrixContext.solver(a: Matrix<Double>, decomposition: CMDecomposition = CMDecomposition.LUP): DecompositionSolver"]},{"name":"fun RealVector.toPoint(): CMVector","description":"space.kscience.kmath.commons.linear.toPoint","location":"kmath-commons/space.kscience.kmath.commons.linear/to-point.html","searchKeys":["toPoint","fun RealVector.toPoint(): CMVector"]},{"name":"class CMOptimizationProblem(symbols: List<Symbol>) : OptimizationProblem<Double> , SymbolIndexer, OptimizationFeature","description":"space.kscience.kmath.commons.optimization.CMOptimizationProblem","location":"kmath-commons/space.kscience.kmath.commons.optimization/-c-m-optimization-problem/index.html","searchKeys":["CMOptimizationProblem","class CMOptimizationProblem(symbols: List<Symbol>) : OptimizationProblem<Double> , SymbolIndexer, OptimizationFeature"]},{"name":"fun CMOptimizationProblem(symbols: List<Symbol>)","description":"space.kscience.kmath.commons.optimization.CMOptimizationProblem.CMOptimizationProblem","location":"kmath-commons/space.kscience.kmath.commons.optimization/-c-m-optimization-problem/-c-m-optimization-problem.html","searchKeys":["CMOptimizationProblem","fun CMOptimizationProblem(symbols: List<Symbol>)"]},{"name":"const val DEFAULT_ABSOLUTE_TOLERANCE: Double = 1e-4","description":"space.kscience.kmath.commons.optimization.CMOptimizationProblem.Companion.DEFAULT_ABSOLUTE_TOLERANCE","location":"kmath-commons/space.kscience.kmath.commons.optimization/-c-m-optimization-problem/-companion/-d-e-f-a-u-l-t_-a-b-s-o-l-u-t-e_-t-o-l-e-r-a-n-c-e.html","searchKeys":["DEFAULT_ABSOLUTE_TOLERANCE","const val DEFAULT_ABSOLUTE_TOLERANCE: Double = 1e-4"]},{"name":"const val DEFAULT_MAX_ITER: Int = 1000","description":"space.kscience.kmath.commons.optimization.CMOptimizationProblem.Companion.DEFAULT_MAX_ITER","location":"kmath-commons/space.kscience.kmath.commons.optimization/-c-m-optimization-problem/-companion/-d-e-f-a-u-l-t_-m-a-x_-i-t-e-r.html","searchKeys":["DEFAULT_MAX_ITER","const val DEFAULT_MAX_ITER: Int = 1000"]},{"name":"const val DEFAULT_RELATIVE_TOLERANCE: Double = 1e-4","description":"space.kscience.kmath.commons.optimization.CMOptimizationProblem.Companion.DEFAULT_RELATIVE_TOLERANCE","location":"kmath-commons/space.kscience.kmath.commons.optimization/-c-m-optimization-problem/-companion/-d-e-f-a-u-l-t_-r-e-l-a-t-i-v-e_-t-o-l-e-r-a-n-c-e.html","searchKeys":["DEFAULT_RELATIVE_TOLERANCE","const val DEFAULT_RELATIVE_TOLERANCE: Double = 1e-4"]},{"name":"open override fun build(symbols: List<Symbol>): CMOptimizationProblem","description":"space.kscience.kmath.commons.optimization.CMOptimizationProblem.Companion.build","location":"kmath-commons/space.kscience.kmath.commons.optimization/-c-m-optimization-problem/-companion/build.html","searchKeys":["build","open override fun build(symbols: List<Symbol>): CMOptimizationProblem"]},{"name":"fun addOptimizationData(data: OptimizationData)","description":"space.kscience.kmath.commons.optimization.CMOptimizationProblem.addOptimizationData","location":"kmath-commons/space.kscience.kmath.commons.optimization/-c-m-optimization-problem/add-optimization-data.html","searchKeys":["addOptimizationData","fun addOptimizationData(data: OptimizationData)"]},{"name":"var convergenceChecker: ConvergenceChecker<PointValuePair>","description":"space.kscience.kmath.commons.optimization.CMOptimizationProblem.convergenceChecker","location":"kmath-commons/space.kscience.kmath.commons.optimization/-c-m-optimization-problem/convergence-checker.html","searchKeys":["convergenceChecker","var convergenceChecker: ConvergenceChecker<PointValuePair>"]},{"name":"open override fun diffExpression(expression: DifferentiableExpression<Double, Expression<Double>>)","description":"space.kscience.kmath.commons.optimization.CMOptimizationProblem.diffExpression","location":"kmath-commons/space.kscience.kmath.commons.optimization/-c-m-optimization-problem/diff-expression.html","searchKeys":["diffExpression","open override fun diffExpression(expression: DifferentiableExpression<Double, Expression<Double>>)"]},{"name":"fun exportOptimizationData(): List<OptimizationData>","description":"space.kscience.kmath.commons.optimization.CMOptimizationProblem.exportOptimizationData","location":"kmath-commons/space.kscience.kmath.commons.optimization/-c-m-optimization-problem/export-optimization-data.html","searchKeys":["exportOptimizationData","fun exportOptimizationData(): List<OptimizationData>"]},{"name":"open override fun expression(expression: Expression<Double>)","description":"space.kscience.kmath.commons.optimization.CMOptimizationProblem.expression","location":"kmath-commons/space.kscience.kmath.commons.optimization/-c-m-optimization-problem/expression.html","searchKeys":["expression","open override fun expression(expression: Expression<Double>)"]},{"name":"fun goal(goalType: GoalType)","description":"space.kscience.kmath.commons.optimization.CMOptimizationProblem.goal","location":"kmath-commons/space.kscience.kmath.commons.optimization/-c-m-optimization-problem/goal.html","searchKeys":["goal","fun goal(goalType: GoalType)"]},{"name":"open override fun initialGuess(map: Map<Symbol, Double>)","description":"space.kscience.kmath.commons.optimization.CMOptimizationProblem.initialGuess","location":"kmath-commons/space.kscience.kmath.commons.optimization/-c-m-optimization-problem/initial-guess.html","searchKeys":["initialGuess","open override fun initialGuess(map: Map<Symbol, Double>)"]},{"name":"fun CMOptimizationProblem.initialGuess(vararg pairs: Pair<Symbol, Double>)","description":"space.kscience.kmath.commons.optimization.initialGuess","location":"kmath-commons/space.kscience.kmath.commons.optimization/initial-guess.html","searchKeys":["initialGuess","fun CMOptimizationProblem.initialGuess(vararg pairs: Pair<Symbol, Double>)"]},{"name":"open override fun optimize(): OptimizationResult<Double>","description":"space.kscience.kmath.commons.optimization.CMOptimizationProblem.optimize","location":"kmath-commons/space.kscience.kmath.commons.optimization/-c-m-optimization-problem/optimize.html","searchKeys":["optimize","open override fun optimize(): OptimizationResult<Double>"]},{"name":"fun optimizer(block: () -> MultivariateOptimizer)","description":"space.kscience.kmath.commons.optimization.CMOptimizationProblem.optimizer","location":"kmath-commons/space.kscience.kmath.commons.optimization/-c-m-optimization-problem/optimizer.html","searchKeys":["optimizer","fun optimizer(block: () -> MultivariateOptimizer)"]},{"name":"fun simplex(simplex: AbstractSimplex)","description":"space.kscience.kmath.commons.optimization.CMOptimizationProblem.simplex","location":"kmath-commons/space.kscience.kmath.commons.optimization/-c-m-optimization-problem/simplex.html","searchKeys":["simplex","fun simplex(simplex: AbstractSimplex)"]},{"name":"fun simplexSteps(steps: Map<Symbol, Double>)","description":"space.kscience.kmath.commons.optimization.CMOptimizationProblem.simplexSteps","location":"kmath-commons/space.kscience.kmath.commons.optimization/-c-m-optimization-problem/simplex-steps.html","searchKeys":["simplexSteps","fun simplexSteps(steps: Map<Symbol, Double>)"]},{"name":"fun CMOptimizationProblem.simplexSteps(vararg pairs: Pair<Symbol, Double>)","description":"space.kscience.kmath.commons.optimization.simplexSteps","location":"kmath-commons/space.kscience.kmath.commons.optimization/simplex-steps.html","searchKeys":["simplexSteps","fun CMOptimizationProblem.simplexSteps(vararg pairs: Pair<Symbol, Double>)"]},{"name":"open override val symbols: List<Symbol>","description":"space.kscience.kmath.commons.optimization.CMOptimizationProblem.symbols","location":"kmath-commons/space.kscience.kmath.commons.optimization/-c-m-optimization-problem/symbols.html","searchKeys":["symbols","open override val symbols: List<Symbol>"]},{"name":"open override fun update(result: OptimizationResult<Double>)","description":"space.kscience.kmath.commons.optimization.CMOptimizationProblem.update","location":"kmath-commons/space.kscience.kmath.commons.optimization/-c-m-optimization-problem/update.html","searchKeys":["update","open override fun update(result: OptimizationResult<Double>)"]},{"name":"operator fun PointValuePair.component1(): DoubleArray","description":"space.kscience.kmath.commons.optimization.component1","location":"kmath-commons/space.kscience.kmath.commons.optimization/component1.html","searchKeys":["component1","operator fun PointValuePair.component1(): DoubleArray"]},{"name":"operator fun PointValuePair.component2(): Double","description":"space.kscience.kmath.commons.optimization.component2","location":"kmath-commons/space.kscience.kmath.commons.optimization/component2.html","searchKeys":["component2","operator fun PointValuePair.component2(): Double"]},{"name":"fun DifferentiableExpression<Double, Expression<Double>>.minimize(vararg startPoint: Pair<Symbol, Double>, configuration: CMOptimizationProblem.() -> Unit = {}): OptimizationResult<Double>","description":"space.kscience.kmath.commons.optimization.minimize","location":"kmath-commons/space.kscience.kmath.commons.optimization/minimize.html","searchKeys":["minimize","fun DifferentiableExpression<Double, Expression<Double>>.minimize(vararg startPoint: Pair<Symbol, Double>, configuration: CMOptimizationProblem.() -> Unit = {}): OptimizationResult<Double>"]},{"name":"class CMRandomGeneratorWrapper(factory: (IntArray) -> RandomGenerator) : RandomGenerator","description":"space.kscience.kmath.commons.random.CMRandomGeneratorWrapper","location":"kmath-commons/space.kscience.kmath.commons.random/-c-m-random-generator-wrapper/index.html","searchKeys":["CMRandomGeneratorWrapper","class CMRandomGeneratorWrapper(factory: (IntArray) -> RandomGenerator) : RandomGenerator"]},{"name":"fun CMRandomGeneratorWrapper(factory: (IntArray) -> RandomGenerator)","description":"space.kscience.kmath.commons.random.CMRandomGeneratorWrapper.CMRandomGeneratorWrapper","location":"kmath-commons/space.kscience.kmath.commons.random/-c-m-random-generator-wrapper/-c-m-random-generator-wrapper.html","searchKeys":["CMRandomGeneratorWrapper","fun CMRandomGeneratorWrapper(factory: (IntArray) -> RandomGenerator)"]},{"name":"val factory: (IntArray) -> RandomGenerator","description":"space.kscience.kmath.commons.random.CMRandomGeneratorWrapper.factory","location":"kmath-commons/space.kscience.kmath.commons.random/-c-m-random-generator-wrapper/factory.html","searchKeys":["factory","val factory: (IntArray) -> RandomGenerator"]},{"name":"open override fun nextBoolean(): Boolean","description":"space.kscience.kmath.commons.random.CMRandomGeneratorWrapper.nextBoolean","location":"kmath-commons/space.kscience.kmath.commons.random/-c-m-random-generator-wrapper/next-boolean.html","searchKeys":["nextBoolean","open override fun nextBoolean(): Boolean"]},{"name":"open override fun nextBytes(bytes: ByteArray)","description":"space.kscience.kmath.commons.random.CMRandomGeneratorWrapper.nextBytes","location":"kmath-commons/space.kscience.kmath.commons.random/-c-m-random-generator-wrapper/next-bytes.html","searchKeys":["nextBytes","open override fun nextBytes(bytes: ByteArray)"]},{"name":"open override fun nextDouble(): Double","description":"space.kscience.kmath.commons.random.CMRandomGeneratorWrapper.nextDouble","location":"kmath-commons/space.kscience.kmath.commons.random/-c-m-random-generator-wrapper/next-double.html","searchKeys":["nextDouble","open override fun nextDouble(): Double"]},{"name":"open override fun nextFloat(): Float","description":"space.kscience.kmath.commons.random.CMRandomGeneratorWrapper.nextFloat","location":"kmath-commons/space.kscience.kmath.commons.random/-c-m-random-generator-wrapper/next-float.html","searchKeys":["nextFloat","open override fun nextFloat(): Float"]},{"name":"open override fun nextGaussian(): Double","description":"space.kscience.kmath.commons.random.CMRandomGeneratorWrapper.nextGaussian","location":"kmath-commons/space.kscience.kmath.commons.random/-c-m-random-generator-wrapper/next-gaussian.html","searchKeys":["nextGaussian","open override fun nextGaussian(): Double"]},{"name":"open override fun nextLong(): Long","description":"space.kscience.kmath.commons.random.CMRandomGeneratorWrapper.nextLong","location":"kmath-commons/space.kscience.kmath.commons.random/-c-m-random-generator-wrapper/next-long.html","searchKeys":["nextLong","open override fun nextLong(): Long"]},{"name":"object Transformations","description":"space.kscience.kmath.commons.transform.Transformations","location":"kmath-commons/space.kscience.kmath.commons.transform/-transformations/index.html","searchKeys":["Transformations","object Transformations"]},{"name":"fun cosine(normalization: DctNormalization = DctNormalization.STANDARD_DCT_I, direction: TransformType = TransformType.FORWARD): SuspendBufferTransform<Double, Double>","description":"space.kscience.kmath.commons.transform.Transformations.cosine","location":"kmath-commons/space.kscience.kmath.commons.transform/-transformations/cosine.html","searchKeys":["cosine","fun cosine(normalization: DctNormalization = DctNormalization.STANDARD_DCT_I, direction: TransformType = TransformType.FORWARD): SuspendBufferTransform<Double, Double>"]},{"name":"fun fourier(normalization: DftNormalization = DftNormalization.STANDARD, direction: TransformType = TransformType.FORWARD): SuspendBufferTransform<Complex, Complex>","description":"space.kscience.kmath.commons.transform.Transformations.fourier","location":"kmath-commons/space.kscience.kmath.commons.transform/-transformations/fourier.html","searchKeys":["fourier","fun fourier(normalization: DftNormalization = DftNormalization.STANDARD, direction: TransformType = TransformType.FORWARD): SuspendBufferTransform<Complex, Complex>"]},{"name":"fun hadamard(direction: TransformType = TransformType.FORWARD): SuspendBufferTransform<Double, Double>","description":"space.kscience.kmath.commons.transform.Transformations.hadamard","location":"kmath-commons/space.kscience.kmath.commons.transform/-transformations/hadamard.html","searchKeys":["hadamard","fun hadamard(direction: TransformType = TransformType.FORWARD): SuspendBufferTransform<Double, Double>"]},{"name":"fun realFourier(normalization: DftNormalization = DftNormalization.STANDARD, direction: TransformType = TransformType.FORWARD): SuspendBufferTransform<Double, Complex>","description":"space.kscience.kmath.commons.transform.Transformations.realFourier","location":"kmath-commons/space.kscience.kmath.commons.transform/-transformations/real-fourier.html","searchKeys":["realFourier","fun realFourier(normalization: DftNormalization = DftNormalization.STANDARD, direction: TransformType = TransformType.FORWARD): SuspendBufferTransform<Double, Complex>"]},{"name":"fun sine(normalization: DstNormalization = DstNormalization.STANDARD_DST_I, direction: TransformType = TransformType.FORWARD): SuspendBufferTransform<Double, Double>","description":"space.kscience.kmath.commons.transform.Transformations.sine","location":"kmath-commons/space.kscience.kmath.commons.transform/-transformations/sine.html","searchKeys":["sine","fun sine(normalization: DstNormalization = DstNormalization.STANDARD_DST_I, direction: TransformType = TransformType.FORWARD): SuspendBufferTransform<Double, Double>"]},{"name":"fun Flow<Complex>.real(): Flow<Double>","description":"space.kscience.kmath.commons.transform.real","location":"kmath-commons/space.kscience.kmath.commons.transform/real.html","searchKeys":["real","fun Flow<Complex>.real(): Flow<Double>"]}]
